"""

해커랭크 Forming a Magic Square : Medium

미디엄레벨의 해커랭크 문제이다.
해커랭크에서는 국내 알고리즘 사이트에 나오지 않는 문제가 많아서 좋다.

발상의 전환이나 생각을 다르게 해야만 풀수있는 문제들이 나와서,
이런게 진짜 알고리즘 문제같긴하다.
국내꺼는 솔직히 공식으로 푸는 수학이랑 뭐가 다른지 잘 모르겠다.

이 문제는 주어진 3X3 배열을 마방진으로 만들고자 할때 발생하는 비용의 최솟값을 구하는 문제이다.
마방진의 특징은 Row를 모두 더해도 15, Column을 모두 더해도 15 Diagonal을 모두 더해도 15가 나온다.
이를 이용해서 문제를 풀려고했는데.. 한 2시간을 매달려도 풀리지가 않는다.

그래서 결국 나온 방법이 어차피 3x3 배열로 한정되있으니 그 크기의 마방진은 이미 사람들이 많이 만들어뒀다.
해봤자 8개밖에 안된다. 그 중에서 현재 주어진 배열과의 비용차이가 최소인것을 구해주면 정답이 된다.

"""

def formingMagicSquare(s):
    ma_bang_jin  =  [[[8, 1, 6], [3, 5, 7], [4, 9, 2]],
                     [[6, 1, 8], [7, 5, 3], [2, 9, 4]],
                     [[4, 9, 2], [3, 5, 7], [8, 1, 6]],
                     [[2, 9, 4], [7, 5, 3], [6, 1, 8]],
                     [[8, 3, 4], [1, 5, 9], [6, 7, 2]],
                     [[4, 3, 8], [9, 5, 1], [2, 7, 6]],
                     [[6, 7, 2], [1, 5, 9], [8, 3, 4]],
                     [[2, 7, 6], [9, 5, 1], [4, 3, 8]]]

    cost = 1e9
    for mabangjin in ma_bang_jin:
        temp = 0
        for x in range(3):
            for y in range(3):
                temp += abs(mabangjin[x][y] - s[x][y])
        cost = min(cost, temp)

    return cost


tt = [[4, 8, 2], [4, 5, 7], [6, 1, 6]]
print(formingMagicSquare(tt))